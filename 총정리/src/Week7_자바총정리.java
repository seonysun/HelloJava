/*
 *          ==> 문법 익히기 
 *              --------- 묶는 연습 (관련된 내용)
 *              1) 변수 
 *                 => 배열(같은 데이터형) , *** 클래스(다른 데이터형) ==> 캡슐화 
 *              2) 명령문 
 *                 => 메소드
 *                    1. 처리요청 => 요청 데이터 => 처리후 => 결과값을 받는다 
 *                                ---------            -----
 *                                매개변수                리턴형 
 *                    2.  리턴형 매개변수 
 *                        -----------
 *                          O    O
 *                          O    X()
 *                          X    O
 *                          X    X
 *                          -void 
 *                    ==> 데이터베이스 
 *                        SELECT ==> 데이터 찾기 ==> 찾은 데이터를 보내준다 (리턴형 존재)
 *                        ---------
 *                        UPDATE
 *                        INSERT
 *                        DELETE 
 *                        --------- 오라클 자체 처리 ==> void
 *                        
 *                        검색 , 상세보기 , 목록 ==> 리턴형 
 *                        ---------------------------
 *                        목록 : ArrayList
 *                        상세 : 클래스
 *                        검색 : ArrayList
 *                        비번,로그인 : boolean
 *                        
 *                    => 메소드 형식 
 *                    public [] 리턴형 메소드명(매개변수...) =>선언부
 *                          ----
 *                          static , final , abstract
 *                    {
 *                        구현부 
 *                    }
 *                    ==> 일반 메소드가 가장 많이 사용
 *              
 *                    ==> 구조프로그램 (오류처리 ,재사용, 추가)
 *                    ==> 반복제거 
 *                    ==> 중심 : 재사용 
 *             -------------------------------------------------------
 *             class 
 *             = 구성요소 
 *               class ClassName
 *               {
 *                  ------------------
 *                   변수 
 *                    = 인스턴스 : new사용만큼 메모리가 생성 (따로 생성)
 *                    = 정적변수 : 메모리 공간 1개 (공유)
 *                    = private = 데이터 보호 
 *                  ------------------
 *                   생성자 : 초기화 
 *                    = public 
 *                  ------------------
 *                   메소드 : 다른 클래스와 통신 
 *                    = public 
 *                  ------------------
 *               }
 *               1. 변수 => 초기화 
 *                  = 명시적 초기화 (O) ==> ArrayList , 배열 
 *                  = 초기화 블록 
 *                    static 변수 => 초기화 블록 
 *                  = 생성자 
 *                    인스턴스 변수 => 생성자 
 *                    => 연결 (서버,쓰레드 동작 , 데이터베이스 연결,쿠키)
 *              2. 생성자 
 *                  = 메모리에 클래스를 저장시 처음 호출 
 *                  = 리턴형이 없다 , 클래스명돠 동일 
 *                  = 오버로딩이 가능 (여러개 만들수 있다)
 *                    ------ 같은 메소드명으로 새로운 기능 추가 
 *                      조건) 메소드명이 동일 
 *                           매개변수의 갯수나 데이터형이 다르다 
 *                           리턴형은 관계없다 
 *                  = 생성자가 없는 경우는 자동으로 매개변수 없는 생성자가 추가
 *              3. 메소드 
 *                 인스턴스변수나 static변수를 이용해서 처리 (인스턴스메소드)
 *                 변수와 관련 없이 처리 ==> static메소드로 만든다 
 *                
 *                 예) 
 *                     String s="Hello Java";
 *                     s.substring()
 *                     s.trim()
 *                     
 *                     static String valueOf(데이터형)=>문자열 변환 
 *                     
 *                     ========> Math는 전체가 static 
 *            -----------------------------------------------------
 *            객체지향의 3대 요소 
 *            캡슐화  : 데이터 보호 => 변수는 private , 읽기/쓰기 => getter/setter
 *            상속/포함 : 재사용 
 *                      상속  : 변경이 가능 
 *                      포함  : 있는 그대로 사용 
 *            다형성 : 수정 , 추가 (오버로딩) 
 *                   ---  -----
 *                   오버라이딩  
 *            
 *            ---------------------------------------------
 *                           오버라이딩             오버로딩
 *            ---------------------------------------------
 *             메소드명          동일               동일
 *            ---------------------------------------------
 *              상태            상속              같은 클래스
 *            ---------------------------------------------
 *             리턴형           동일               상관없다
 *            ---------------------------------------------
 *             매개변수         동일                다르다(데이터형/갯수)
 *            ---------------------------------------------
 *            접근지정어         확대가능             상관없다 
 *            ---------------------------------------------
 *            *** private < default < protected < public 
 *            private : 자신의 클래스에서만 사용이 가능 
 *                      => 인스턴스 변수 
 *            default : 자신의 클래스 , 같은 패키지안에서 접근이 가능 
 *            protected : 자신의 클래스 , 같은 패키지안에서 접근이 가능, 상속시에는 다른 패키지에 접근이다 
 *            public : 모든 클래스에 접근이 가능 
 *                      => 생성자 , 클래스 , 메소드 , 인터페이스 
 *                      
 *            상속 : 기존의 클래스가 가지고 있는 모든 내용을 받아서 사용 
 *                  => 확장 (기존의 클래스를 확장해서 사용) => extends => 단일 상속 
 *                  => 예외 조건 : static , 생성자 , 초기화블록 , private
 *            -------------------------------------------------------------------------
 *            클래스의 종류 
 *            ----------
 *             1. 추상 클래스 : 미완성된 클래스 (메소드가 구현여부) => 메모리 할당을 할 수 없다 
 *                           => 사용시에는 반드시 사용자가 상속을 받아서 구현후에 사용 
 *                           형식)
 *                            public abstract class ClassName
 *                            {
 *                               ---------------------------
 *                                인스턴스 변수 설정이 가능 
 *                               ---------------------------
 *                                생성자 
 *                               ---------------------------
 *                                구현된 메소드 
 *                               ---------------------------
 *                                구현이 안된 메소드
 *                                public abstract 리턴형 메소드명();
 *                               ---------------------------
 *                            }
 *                        ==> 주로 사용하는 목적 
 *                            관련된 클래스를 묶어서 제어할때 주로 사용 
 *                        ==> 단일 상속만 가능 
 *             2. 인터페이스 : 추상 클래스의 일종 
 *                          다중상속이 가능 
 *                          메모리 할당이 불가능 
 *                          인스턴스가 존재하지 않는다 
 *                          생성자가 없다 
 *                          => 표준화 => List,Set,Map 
 *                          => 독립적으로 사용이 가능 
 *                          => 서로 다른 클래스 연결해서 사용이 가능 
 *                          => 결합성이 낮은 프로그램 (수정이 다른 클래스에 영향이 없게 만든다)
 *                          => 요구사항분석시에 제작 
 *                -----------------------------------------------------------
 *                                   추상 클래스           인터페이스 
 *                -----------------------------------------------------------
 *                  상속             단일 상속              다중 상속 
 *                -----------------------------------------------------------
 *                  상속방법           extends            implements
 *                -----------------------------------------------------------
 *                  변수            인스턴스변수             상수형 변수 
 *                -----------------------------------------------------------
 *                 생성자            존재                  존재하지 않는다
 *                -----------------------------------------------------------
 *                  메소드           구현된 메소드            구현이 안된 메소드
 *                                 구현이 안된 메소드         구현된 메소드
 *                                                       default 
 *                                                       static 
 *                -----------------------------------------------------------
 *                   상속 
 *                    interface A
 *                    interface B extends A  
 *                                -------
 *                    interface C extends B
 *                                --------
 *                   
 *                    interface A
 *                    interface B 
 *                    interface C extends A,B
 *                                --------
 *                                
 *                    interface A
 *                    interface B 
 *                    class C implements A,B
 *                    
 *                    interface A
 *                    interface B 
 *                    class C
 *                    class D extends C implements A,B
 *                    
 *             3. 내부클래스 : 쓰레드 , 네트워크 , 빅데이터 분석 (MapReduce, Spark)
 *                => 멤버클래스 
 *                   class A
 *                   { 
 *                      데이터 
 *                      class B
 *                      {
 *                         A가 가지고 있는 데이터를 할 때 사용 
 *                      }
 *                   }
 *                => 익명의 클래스 (스프링)
 *                   class A =============> 윈도우 
 *                   {
 *                       B b=new B()
 *                       {
 *                           public void display()
 *                           {
 *                           }
 *                       }
 *                       // 상속없이 오버라이딩이 가능한 클래스 
 *                   }
 *                   class B
 *                   {
 *                      public void display()
 *                      {
 *                      }
 *                   }
 *                => 지역 클래스 
 *                   class A
 *                   {
 *                      public void display()
 *                      {
 *                         class B
 *                         {
 *                         }
 *                      }
 *                   }
 *             4. 종단클래스 : 확장이 불가능한 클래스 
 *                final class ClassName ==> String,Math,System (java.lang)
 *            
 *         ---------------------------------------------------------------- 7장  
 *         예외처리 => 사전에 에러 방지 프로그램 , 비정상 종료를 방지하고 정상 수행 가능하게 만든다 
 *               => 수정이 가능 에러시에 사용 
 *               => 반드시 예외처리 : 컴파일시 에러예상 = CheckedException 
 *                  java.io,java.sql,java.net,Thread => 예외처리를 필요로 한다 
 *               => 필요시 예외처리 : 실행시 에러 예상 = UnCheckedException 
 *               
 *                             Object
 *                               |
 *                           Throwable
 *                               |
 *                     -----------------------------------
 *                     |                                 |
 *                   Error                          Exception
 *                                                     |
 *                                            --------------------------------
 *                                           CheckedException       UnCheckedException
 *                                               |                        |
 *                                            IOException            RuntimeException 
 *                                            SQLException                |
 *                                            MalFormedURLException     NullPointerException
 *                                                                      A a;
 *                                                                      a.display();
 *                                                                      String s=getData()
 *                                            => Jsoup.connect("").get()NumberFormatException
 *                                                                       Integer.parseInt("10") 
 *                                                                       => web
 *                                                                       ?no = 10 
 *                                            ClassNotFoundException    ArrayIndexOutOfBoundsException
 *                                            => Class.forName("")      ClassCastException 
 *                                                                      class A
 *                                                                      {
 *                                                                          int a,b,c;
 *                                                                      }
 *                                                                      class B
 *                                                                      {
 *                                                                          int a;
 *                                                                      }
 *                                                                      
 *                                                                      A a=(A)new B();
 *                                                                          
 *                                            InterruptedException (Thread)
 *         ------
 *           => 예외 복구 
 *              try
 *              {
 *                 정상수행이 가능한 문장 
 *              }catch( 예외처리 종류)
 *              {
 *                 예외발생시 복구하는 문장 , 에러 확인 
 *                                     getMessage() , ***printStackTrace()
 *              }
 *              finally
 *              {
 *                  try,catch상관없이 무조건 수행문장 (닫기 => 데이터베이스,파일 닫기) => 생략이 가능 
 *              }
 *              ==> 중요
 *                  전체문장에서만 사용하는 것이 아니다 
 *                  예외가 발생할 소스위치에서도 사용이 가능 ==> 크롤링 
 *                  
 *                  try
 *                  {
 *                      for(int i=1;i<=10;i++)
 *                      {
 *                         int a=(int)(Math.random()*3) ==> 0,1,2
 *                         System.out.println(i/a)
 *                      }
 *                  }catch(Exception ex){}
 *                  
 *                  for(int i=1;i<=10;i++)
 *                  {
 *                     try
 *                     {
 *                         int a=(int)(Math.random()*3) ==> 0,1,2
 *                         System.out.println(i/a)
 *                     }catch(Exception e){} ==> continue;
 *                  }
 *                  
 *           => 에외 회피=> 간접처리 => 시스템에 알려만 준다 => 예외선언 
 *              method() throws 예외처리....
 *              
 *              => 처리 방법 
 *                 method() throws 예외처리...
 *                 method()
 *                 {
 *                    try
 *                    {
 *                       
 *                    }catch(Exception e)
 *                 }
 *              => 사용자 정의(프로그래머) => throws문장으로 사용하지 않고 보통 try~catch
 *                 => 라이브러리에서 주로 처리후 사용이 가능
 *         =================================================== 8장  
 */
// 멤버클래스 => 두개의 클래스가 공유해야되는 데이터 , 메소드 존재할 때 주로 사용 
class A { // 윈도우 , Server (접속 담당)
	class B { //쓰레드 , 통신 담당 
		public void display() {
			System.out.println("B:display Call...");
		}
	}
	public void aaa() {
		B b=new B();
		b.display();
	}
}
class D {
	E e=new E() {
		public void display() {
			System.out.println("D.E:display() Call...");
		}
	};
}
class E {
	public void display() {
		System.out.println("E:display() Call...");
	}
}
public class Week7_자바총정리{
	public static void main(String[] args) {
		A a=new A();
		a.aaa();
			
		E e=new E();
		e.display();
			
		D d=new D();
		d.e.display();
		
	}
	
}
