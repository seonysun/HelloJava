/*
 * 1. 변수, 연산자, 제어문, 배열
 * 2. 클래스 
 * 	- 클래스 정의 방법 : [접근지정어] class 클래스명 { 멤버변수(속성, 필드: instance) //변수는 배열, 클래스도 가능
 * 											생성자 //오버로딩, 기본생성자는 자동 추가 가능
 * 											메소드 //속성, 필드를 제어(위에 있는 속성, 필드와 관련없는 경우 static)
 * 														ex. String s="Hello";
 * 	  														s.length(); -> 문자열과 관련된 인스턴스 메소드
 * 	 														String.ValueOf(10) -> 문자열과 관련없는 static 메소드
 * 									}
 * 					 public -> 클래스(다른 패키지에서 접근), 메소드(다른 클래스와 통신), 생성자(메모리 할당, 상속)
 * 					 private -> 변수(데이터 보호, 은닉화)
 * 	- 객체 생성 방법 : new
 * 		기본형 -> 메모리 자체에 실제 데이터값을 저장
 * 		참조형 -> 메모리에 실제 데이터의 메모리 주소를 저장; 객체, 인스턴스
 * 		  cf. 객체 생성 방법
 * 			클래스명 참조변수=new 생성자();
 * 			클래스명 참조변수=클래스명.newInstance();
 * 			클래스명 참조변수=Class.forName().getInstance();
 * 	- 메소드 정의 방법 : [접근지정어][제어자] 리턴형 메소드명(매개변수) { }
 * 					public static -> 공유 메소드(DB)
 * 					public final -> 종단 메소드, 오버라이딩 불가
 * 					public abstract -> 추상 메소드, 객체에서 반드시 구현 후 사용(프로그램에 맞게 각각 구현)
 * 	- 생성자 정의 방법 : 클래스명(매개변수) { } //변수 초기화, 메모리 저장 시 호출되는 메소드 -> 시작과 동시에 수행되는 기능 설정
 * 																		   (자동로그인, 쿠키, 윈도우 화면디자인, DB연결, 서버연결)
 * 		cf. 오버로딩 : 생성자 / 오버라이딩 : 일반 메소드에서 주로 사용됨
 * 	- this : 객체 자신을 나타내는 키워드, 객체의 주소값 저장 //static, 객체 생성 시마다 변경 
 * 			-> 생성자, 인스턴스 메소드 안에서만 사용 가능(지역변수와 구분 시 주로 사용)
 * 
 * 3. 상속
 * 		cf. 객체지향의 특성 : 데이터보호 - 캡슐화
 * 						 재사용 - 상속/포함
 * 						 수정/추가 - 오버라이딩/오버로딩
 * 						 공통적인 내용 모아서 모듈화 - 추상화
 * 	- class Sub extends Super { }
 * 	- 특징
 * 		재사용 가능 -> 중복코딩 제거
 *		기존의 클래스 확장해서 새로운 클래스 제작 
 * 		유지보수
 * 		단일 상속만 가능
 * 		데이터형 : 상위클래스 > 하위클래스 -> 상속이 없는 클래스의 크기는 동일, 상속이 있는 경우에만 크기 비교 가능
 * 		메모리 : 상위클래스 < 하위클래스
 * 	- 메모리 할당(참조변수로 생성, 생성자로 받음) -> 참조변수 타입에 따라 접근 가능한 멤버의 개수 달라짐 
 * 		하위 클래스로 생성 Sub s=new Sub(); 
 * 		상위 클래스로 생성 Super s=new Sub(); //추상클래스, 인터페이스(구현된 메소드가 업으므로 하위클래스의 생성자 활용)
 * 		상위 클래스로 생성, 하위 클래스로 받음 Sub s=(Sub)new Super();
 * 	- super : 상위클래스 제어 
 * 	- 메소드 오버라이딩 : 추상클래스, 인터페이스에서 많이 사용
 * 	- final : 상수형 변수
 * 	  static final : 상수
 * 		-> 명시적 초기화 필수
 * 		   지역변수에서도 사용 가능
 * 	- Object 클래스 : 최상위 클래스
 * 
 * 4. 인터페이스/추상클래스
 * 	- 인터페이스는 추상클래스의 일종, 추상클래스의 단점 보완한 것
 * 		-> 추상클래스를 대부분 인터페이스로 대체해서 사용하나, 일부 라이브러리에서 아직 사용중
 * 	- 공통점 : 구현되지 않은 메소드 지님 
 * 				-> 자신이 메모리 할당 할 수 없음, 상속 통해 구현 후 사용
 * 	- 차이점
 * 		목적) 추상클래스 : 상속받아서 확장
 * 			 인터페이스 : 관련된 여러개의 클래스 묶어서 관리(메소드 동일)
 * 		-----------------------------------------------
 * 				   추상클래스 			  인터페이스
 * 		-----------------------------------------------
 * 		상속		   단일 상속			  다중 상속
 * 		-----------------------------------------------
 * 		메소드	  구현된 메소드		구현된 메소드(default 메소드)		
 * 				구현되지 않은 메소드	   구현되지 않은 메소드
 * 		-----------------------------------------------
 * 		변수 		  인스턴스 변수			  상수형 변수
 * 		-----------------------------------------------
 * 		생성자 		  O					 X
 * 		-----------------------------------------------
 * 		상속키워드	   extends			implements
 * 		-----------------------------------------------
 * 		접근지정어		 전체				   public
 * 		-----------------------------------------------
 * 	- 정의 방법
 * 		추상클래스 : public abstract class 클래스명 { 변수, 생성자, 메소드(구현된 + 구현되지 않은) }
 * 																		//공통 사용 기능, 객체마다 다르게 구현될 때
 * 		인터페이스 : public interface 인터페이스명 { 상수 //명시적 초기화 필수, public static final 자동 추가 가능
 * 											  구현되지 않은 메소드 void 메소드명(); //public abstract 자동 추가 가능
 * 											  구현된 메소드 default void 메소드명(){} //default 필수, public 자동 추가 가능
 *									}
 * 	- 구현 방법 : 상속으로 메소드 구현(오버라이딩) 후 사용 
 * 				-> 미완성 클래스
 * 	- 상속 방법
 * 		추상클래스 extends
 * 		인터페이스 implements : 인터페이스 -> 클래스
 * 				extends : 인터페이스 -> 인터페이스
 * 			- 다중 상속 가능
 * 				interface A
 * 				interface B extends A
 * 				interface C extends B -> 단일상속
 * 				interface C extends A,B -> 다중상속
 * 
 * 				interface A
 * 				interface B
 * 				class C implements A,B
 * 
 * 				interface A
 * 				interface B
 * 				class C
 * 				class D extends C implements A,B
 * 	- default 메소드 : 인터페이스의 구현된 메소드
 * 	- Connection : Oracle, MYSQL, MS-SQL, MariaDB
 * 	  DocumentBuildFactory : HTML, XML, WML, HDML, VML
 * 
 * 5. 예외처리
 * 	- 종류(예외 복구, 예외 회피)
 * 	- 자바에서 제공하는 예외 처리 클래스간의 계층구조
 * 	- 실행 순서
 * 	- 사용자정의 예외처리 호출 방법
 * =========================================================== 자바문법
 * 6. 라이브러리
 * 	- Object, String, StringBuffer, Math, Wrapper -> java.lang
 * 	- StringTokenizer, Date, Calender, SimpleDateFormat
 * 	- List, Set, Map -> java.util
 * 	- IO
 * =========================================================== 웹
 * SQL -> java.sql
 * */

public class Week5_문법총정리 {

}
